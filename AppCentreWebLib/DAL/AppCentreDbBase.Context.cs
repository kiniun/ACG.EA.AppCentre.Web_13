//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace  ACG.EA.AppCentre.Lib.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class AppCentreEntities : DbContext
    {
        public AppCentreEntities()
            : base("name=AppCentreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //modelBuilder.Entity<USER_APPLICATION_GROUP>()
            //    .HasRequired(g => g.APPLICATION_GROUP).WithMany(t => t.USER_APPLICATION_GROUP)
            //    .HasForeignKey(d => new { d.APPLICATION_ID, d.GROUP_ID }).WillCascadeOnDelete(true);

            //modelBuilder.Entity<USER_PERMISSION>()
            //    .HasRequired(t => t.PERMISSION).WithMany(t => t.USER_PERMISSION)
            //    .HasForeignKey(d => d.PERMISSION_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<USER_APPLICATION_GROUP>()
            //    .HasRequired(g => g.USER).WithMany(t => t.USER_APPLICATION_GROUP)
            //    .HasForeignKey(d => d.USER_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<USER_PERMISSION>()
            //    .HasRequired(t => t.USER).WithMany(t => t.USER_PERMISSION)
            //    .HasForeignKey(d => d.USER_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<GROUP_PERMISSION>()
            //.HasRequired(t => t.PERMISSION).WithMany(t => t.GROUP_PERMISSION)
            //.HasForeignKey(d => d.PERMISSION_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<GROUP_PERMISSION>()
            //.HasRequired(t => t.APPLICATION_GROUP).WithMany(t => t.GROUP_PERMISSION)
            //.HasForeignKey(d => new { d.APPLICATION_ID, d.GROUP_ID }).WillCascadeOnDelete(true);

            //modelBuilder.Entity<PERMISSION>()
            //    .HasRequired(t => t.APPLICATION).WithMany(t => t.PERMISSIONs)
            //    .HasForeignKey(d => d.PERMISSION_ID).WillCascadeOnDelete(true);

            ////modelBuilder.Entity<PERMISSION>()
            ////    .HasRequired(t => t.TARGET).WithMany(t => t.PERMISSIONs)
            ////    .HasForeignKey(d => d.TARGET_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<TARGET_VALUE>()
            //    .HasRequired(t => t.TARGET).WithMany(t => t.TARGET_VALUE)
            //    .HasForeignKey(d => d.TARGET_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<TARGET>()
            //    .HasRequired(t => t.APPLICATION).WithMany(t => t.TARGETs)
            //    .HasForeignKey(d => d.APPLICATION_ID).WillCascadeOnDelete(true);

            //modelBuilder.Entity<APPLICATION_GROUP>()
            //    .HasRequired(t => t.APPLICATION).WithMany(t => t.APPLICATION_GROUP)
            //    .HasForeignKey(d => d.APPLICAITON_ID).WillCascadeOnDelete(true);
        }
    
        public virtual DbSet<ACTIVITY_LOG> ACTIVITY_LOG { get; set; }
        public virtual DbSet<APPLICATION> APPLICATIONs { get; set; }
        public virtual DbSet<APPLICATION_GROUP> APPLICATION_GROUP { get; set; }
        public virtual DbSet<CATALOG> CATALOGs { get; set; }
        public virtual DbSet<GROUP_PERMISSION> GROUP_PERMISSION { get; set; }
        public virtual DbSet<PERMISSION> PERMISSIONs { get; set; }
        public virtual DbSet<TARGET> TARGETs { get; set; }
        public virtual DbSet<TARGET_VALUE> TARGET_VALUE { get; set; }
        public virtual DbSet<USER> USERs { get; set; }
        public virtual DbSet<USER_APPLICATION_GROUP> USER_APPLICATION_GROUP { get; set; }
        public virtual DbSet<USER_PERMISSION> USER_PERMISSION { get; set; }
        public virtual DbSet<VW_USER_PERMISSION> VW_USER_PERMISSION { get; set; }
    }
}
